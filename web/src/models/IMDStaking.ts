/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface IMDStaking extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IMDStaking;
  clone(): IMDStaking;
  methods: {
    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * The reward token (college credit) to be issued to stakers.
     */
    rewardToken(): NonPayableTransactionObject<string>;

    /**
     * A mapping of token addresses to staking configurations.
     */
    stakableTokenAttributes(arg0: string): NonPayableTransactionObject<{
      minYield: string;
      maxYield: string;
      step: string;
      yieldPeriod: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * owner only.
     * Mints the reward token to an account.
     * @param _amount the amount of tokens to mint.
     * @param _recipient the recipient of the minted tokens.
     */
    mintRewardToken(
      _recipient: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * owner only, doesn't allow adding already staked tokens.
     * Adds a new token that can be staked in the contract.
     * @param _maxYield the maximum yield for the stakable token.
     * @param _minYield the minimum yield for the stakable token.
     * @param _step the amount yield increases per yield period.
     * @param _token the first stakable token address.
     * @param _yieldPeriod the length (in seconds) of a yield period (the amount of period after which a yield is calculated).
     */
    addStakableToken(
      _token: string,
      _minYield: number | string | BN,
      _maxYield: number | string | BN,
      _step: number | string | BN,
      _yieldPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * the contract must be approved to transfer that token first.      the address must be a stakable token.
     * Stakes a given token id from a given contract.
     * @param _token the address of the stakable token.
     * @param _tokenId the id of the token to stake.
     */
    stake(
      _token: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * the contract must be approved to transfer that token first.      the address must be a stakable token.
     * Stakes a given token id from a given contract.
     * @param _token the address of the stakable token.
     * @param _tokenIds the ids of the tokens to stake.
     */
    stakeMany(
      _token: string,
      _tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * reverts if the token is not owned by the caller.
     * Unstakes a given token held by the calling user.
     * @param _token the address of the token contract that the token belongs to.
     * @param _tokenId the id of the token to unstake.
     */
    unstake(
      _token: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * reverts if the token(s) are not owned by the caller.
     * Unstakes the given tokens held by the calling user.
     * @param _token the address of the token contract that the tokens belong to.
     * @param _tokenIds the ids of the tokens to unstake.
     */
    unstakeMany(
      _token: string,
      _tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * Claims the rewards for the caller.
     * @param _token the token for which we are claiming rewards.
     */
    claimRewards(_token: string): NonPayableTransactionObject<void>;

    /**
     * Gets the College Credit dividend of the provided user.
     * @param _token the token in which we are checking.
     * @param _user the user whose dividend we are checking.
     */
    dividendOf(
      _user: string,
      _token: string
    ): NonPayableTransactionObject<string>;

    /**
     * reverts if the token is not owned by the caller.
     * Unstakes a given token held by the calling user AND withdraws all dividends.
     * @param _token the address of the token contract that the token belongs to.
     * @param _tokenId the id of the token to unstake.
     */
    unstakeAndClaimRewards(
      _token: string,
      _tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * reverts if the tokens are not owned by the caller.
     * Unstakes the given tokens held by the calling user AND withdraws all dividends.
     * @param _token the address of the token contract that the token belongs to.
     * @param _tokenIds the ids of the tokens to unstake.
     */
    unstakeManyAndClaimRewards(
      _token: string,
      _tokenIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    /**
     * reverts if called on an invalid token address.
     * Gets the total amount of tokens staked for the given user in the given contract.
     * @param _token the address of the contract whose staked tokens we are skimming.
     * @param _user the user whose stakes are being counted.
     */
    totalStakedFor(
      _user: string,
      _token: string
    ): NonPayableTransactionObject<string>;

    /**
     * Gets the total amount staked for a given token address.
     * @param _token the address to get the amount staked from.
     */
    totalStaked(_token: string): NonPayableTransactionObject<string>;

    /**
     * reverts if called on an invalid token address.
     * Gets all of the token ids that a user has staked from a given contract.
     * @param _token the address of the token contract being analyzed.
     * @param _user the user whose token ids are being analyzed.
     */
    stakedTokenIds(
      _user: string,
      _token: string
    ): NonPayableTransactionObject<string[]>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
